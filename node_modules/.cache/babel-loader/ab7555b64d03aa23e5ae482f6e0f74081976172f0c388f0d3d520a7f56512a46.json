{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ExpenseTrackerContext } from \"./context/context\";\nimport { Doughnut } from 'react-chartjs-2';\nimport { incomeCategories, expenseCategories, resetCategories } from './constants/categories';\nconst useTransactions = title => {\n  _s();\n  resetCategories();\n  const {\n    transactions\n  } = useContext(ExpenseTrackerContext);\n  const transactionsType = transactions.filter(t => t.type === title);\n  const total = transactionsType.reduce((acc, currVal) => acc += currVal.amount, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n\n  // State to hold the chart instance\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chartInstance) {\n      // Destroy the existing chart\n      chartInstance.destroy();\n    }\n\n    // Render the new chart\n    const newChartInstance = new Doughnut(null, {\n      // Pass null to create a detached chart\n      data: chartData\n    });\n\n    // Set the new chart instance to the state\n    setChartInstance(newChartInstance);\n\n    // Cleanup the chart on component unmount\n    return () => {\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, [title, transactions]);\n  transactionsType.forEach(t => {\n    const category = categories.find(c => c.type === t.category);\n    if (category) category.amount += t.amount;\n  });\n  const filteredCategories = categories.filter(sc => sc.amount > 0);\n  const chartData = {\n    labels: filteredCategories.map(c => c.type),\n    datasets: [{\n      data: filteredCategories.map(c => c.amount),\n      backgroundColor: filteredCategories.map(c => c.color)\n    }]\n  };\n  return {\n    filteredCategories,\n    total,\n    chartData\n  };\n};\n_s(useTransactions, \"yyw3Aai46IsYwdJ/d/Rp5M3KK0g=\");\nexport default useTransactions;","map":{"version":3,"names":["useContext","useEffect","useState","ExpenseTrackerContext","Doughnut","incomeCategories","expenseCategories","resetCategories","useTransactions","title","_s","transactions","transactionsType","filter","t","type","total","reduce","acc","currVal","amount","categories","chartInstance","setChartInstance","destroy","newChartInstance","data","chartData","forEach","category","find","c","filteredCategories","sc","labels","map","datasets","backgroundColor","color"],"sources":["/Users/Administrator/Desktop/STUDY/JavaScript/budget-tracker/src/useTransactions.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ExpenseTrackerContext } from \"./context/context\";\nimport { Doughnut } from 'react-chartjs-2';\nimport { incomeCategories, expenseCategories, resetCategories } from './constants/categories';\n\nconst useTransactions = (title) => {\n  resetCategories();\n  const { transactions } = useContext(ExpenseTrackerContext);\n  const transactionsType = transactions.filter((t) => t.type === title);\n  const total = transactionsType.reduce((acc, currVal) => acc += currVal.amount, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n\n  // State to hold the chart instance\n  const [chartInstance, setChartInstance] = useState(null);\n\n  useEffect(() => {\n    // Check if there's an existing chart\n    if (chartInstance) {\n      // Destroy the existing chart\n      chartInstance.destroy();\n    }\n\n    // Render the new chart\n    const newChartInstance = new Doughnut(null, {  // Pass null to create a detached chart\n      data: chartData,\n    });\n\n    // Set the new chart instance to the state\n    setChartInstance(newChartInstance);\n\n    // Cleanup the chart on component unmount\n    return () => {\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, [title, transactions]);\n\n  transactionsType.forEach((t) => {\n    const category = categories.find((c) => c.type === t.category);\n\n    if (category) category.amount += t.amount;\n  });\n\n  const filteredCategories = categories.filter((sc) => sc.amount > 0);\n\n  const chartData = {\n    labels: filteredCategories.map((c) => c.type),\n    datasets: [{\n      data: filteredCategories.map((c) => c.amount),\n      backgroundColor: filteredCategories.map((c) => c.color),\n    }],\n  };\n\n  return { filteredCategories, total, chartData };\n};\n\nexport default useTransactions;\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,wBAAwB;AAE7F,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACjCH,eAAe,CAAC,CAAC;EACjB,MAAM;IAAEI;EAAa,CAAC,GAAGX,UAAU,CAACG,qBAAqB,CAAC;EAC1D,MAAMS,gBAAgB,GAAGD,YAAY,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKN,KAAK,CAAC;EACrE,MAAMO,KAAK,GAAGJ,gBAAgB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAKD,GAAG,IAAIC,OAAO,CAACC,MAAM,EAAE,CAAC,CAAC;EACjF,MAAMC,UAAU,GAAGZ,KAAK,KAAK,QAAQ,GAAGJ,gBAAgB,GAAGC,iBAAiB;;EAE5E;EACA,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd;IACA,IAAIqB,aAAa,EAAE;MACjB;MACAA,aAAa,CAACE,OAAO,CAAC,CAAC;IACzB;;IAEA;IACA,MAAMC,gBAAgB,GAAG,IAAIrB,QAAQ,CAAC,IAAI,EAAE;MAAG;MAC7CsB,IAAI,EAAEC;IACR,CAAC,CAAC;;IAEF;IACAJ,gBAAgB,CAACE,gBAAgB,CAAC;;IAElC;IACA,OAAO,MAAM;MACX,IAAIH,aAAa,EAAE;QACjBA,aAAa,CAACE,OAAO,CAAC,CAAC;MACzB;IACF,CAAC;EACH,CAAC,EAAE,CAACf,KAAK,EAAEE,YAAY,CAAC,CAAC;EAEzBC,gBAAgB,CAACgB,OAAO,CAAEd,CAAC,IAAK;IAC9B,MAAMe,QAAQ,GAAGR,UAAU,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAChB,IAAI,KAAKD,CAAC,CAACe,QAAQ,CAAC;IAE9D,IAAIA,QAAQ,EAAEA,QAAQ,CAACT,MAAM,IAAIN,CAAC,CAACM,MAAM;EAC3C,CAAC,CAAC;EAEF,MAAMY,kBAAkB,GAAGX,UAAU,CAACR,MAAM,CAAEoB,EAAE,IAAKA,EAAE,CAACb,MAAM,GAAG,CAAC,CAAC;EAEnE,MAAMO,SAAS,GAAG;IAChBO,MAAM,EAAEF,kBAAkB,CAACG,GAAG,CAAEJ,CAAC,IAAKA,CAAC,CAAChB,IAAI,CAAC;IAC7CqB,QAAQ,EAAE,CAAC;MACTV,IAAI,EAAEM,kBAAkB,CAACG,GAAG,CAAEJ,CAAC,IAAKA,CAAC,CAACX,MAAM,CAAC;MAC7CiB,eAAe,EAAEL,kBAAkB,CAACG,GAAG,CAAEJ,CAAC,IAAKA,CAAC,CAACO,KAAK;IACxD,CAAC;EACH,CAAC;EAED,OAAO;IAAEN,kBAAkB;IAAEhB,KAAK;IAAEW;EAAU,CAAC;AACjD,CAAC;AAACjB,EAAA,CAlDIF,eAAe;AAoDrB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}